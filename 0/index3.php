<?php
require_once 'config-path.php';
require_once '../session/session-manager.php';
SessionManager::checkSession();
?>
<!DOCTYPE html>
<html lang="en" data-bs-theme="auto">
<head>
  <title>Dashboard</title>  
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .animation-container {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .svg-container {
            width: 100%;
            overflow-x: auto;
        }
        
        svg {
            display: block;
            margin: 0 auto;
            /* min-width: 750px; */
        }
        
        .motor-rect, .valve-circle {
            cursor: pointer;
            transition: fill 0.3s ease;
        }
        
        .controls-section {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            background-color: #f8f9fa;
        }
        
        .btn-motor {
            margin-right: 8px;
            margin-bottom: 8px;
        }
        
        .btn-valve {
            margin-right: 8px;
            margin-bottom: 8px;
        }
        
        .instructions {
            margin-top: 20px;
            color: #6c757d;
            font-size: 0.9rem;
        }

        .water-flow {
            animation: flowAnimation 2s linear infinite;
        }

        .water-flow-main {
            animation: flowAnimationMain 2s linear infinite;
        }

        .water-flow-short {
            animation: flowAnimationShort 2s linear infinite;
        }

        @keyframes flowAnimation {
            0% {
                stroke-dashoffset: 0;
            }
            100% {
                stroke-dashoffset: -40;
            }
        }

        @keyframes flowAnimationMain {
            0% {
                stroke-dashoffset: 0;
            }
            100% {
                stroke-dashoffset: -80;
            }
        }

        @keyframes flowAnimationShort {
            0% {
                stroke-dashoffset: 0;
            }
            100% {
                stroke-dashoffset: -30;
            }
        }

        @media (max-width: 768px) {
            .controls-section {
                padding: 10px;
            }
            
            .btn-motor, .btn-valve {
                font-size: 0.8rem;
                padding: 0.25rem 0.5rem;
            }
        }
    </style>
  <?php
  include(BASE_PATH."assets/html/start-page.php");
  ?>
  <div class="d-flex flex-column flex-shrink-0 p-3 main-content ">
    <div class="container-fluid">
      <div class="row">
         <div class="animation-container">
        <h2 class="text-center my-4">Water Flow Control System</h2>
        
        <div class="svg-container">
            <svg id="water-system-svg"  viewBox="0 0 800 400" class="border border-secondary bg-white">
                <!-- SVG content will be dynamically generated by JavaScript -->
            </svg>
        </div>
    </div>
      </div>
    </div>
  </div>

</main>
<script src="<?php echo BASE_PATH;?>assets/js/sidebar-menu.js"></script>
<?php
include(BASE_PATH."assets/html/body-end.php"); 
include(BASE_PATH."assets/html/html-end.php"); 
?>
 <script>
        // Animation settings
        const baseAnimationSpeed = 100; // Base speed value
        const animationDuration = 2; // seconds
        const flowAnimationClass = 'water-flow';
        
        // Color constants
        const colorMotorActive = "#4299e1";   // Active motor - blue
        const colorMotorInactive = "#a0aec0"; // Inactive motor - gray
        const colorPipeActive = "#3182ce";    // Active pipe - blue
        const colorPipeInactive = "#cbd5e0";  // Inactive pipe - light gray
        const colorValveActive = "#38b2ac";   // Active valve - teal
        const colorValveInactive = "#f36b6b"; // Inactive valve - light red 
        const colorPlatformActive = "#4299e1"; // Active platform - blue
        const colorPlatformInactive = "#e2e8f0"; // Inactive platform - very light gray
        
        // State management
        const state = {
            motors: [
                { id: 1, name: "Motor 1", isOn: false },
                { id: 2, name: "Motor 2", isOn: false },
                { id: 3, name: "Motor 3", isOn: false },
                { id: 4, name: "Motor 4", isOn: false },
                { id: 5, name: "Motor 5", isOn: false },
                { id: 6, name: "Motor 6", isOn: false }
            ],
            valves: [
                { id: 1, name: "Valve 1", isOpen: false, platformId: 1 },
                { id: 2, name: "Valve 2", isOpen: false, platformId: 2 },
                { id: 3, name: "Valve 3", isOpen: false, platformId: 3 },
                { id: 4, name: "Valve 4", isOpen: false, platformId: 4 },
                { id: 5, name: "Valve 5", isOpen: false, platformId: 5 },
                { id: 6, name: "Valve 6", isOpen: false, platformId: 6 }
            ]
        };
        
        // Helper functions
        function isAnyMotorOn() {
            return state.motors.some(motor => motor.isOn);
        }
        
        function getActiveMotorCount() {
            return state.motors.filter(motor => motor.isOn).length;
        }
        
        function calculateAnimationSpeed() {
            const activeMotors = getActiveMotorCount();
            return baseAnimationSpeed + (activeMotors * 20);
        }
        
        function getAnimationDuration() {
            const speed = calculateAnimationSpeed();
            // Convert speed to duration - higher speed means shorter duration
            return (baseAnimationSpeed / speed) * animationDuration;
        }
        
        function updateAnimationSpeed() {
            const duration = getAnimationDuration();
            
            // Update CSS custom properties for animation duration
            const style = document.createElement('style');
            style.textContent = `
                .water-flow {
                    animation-duration: ${duration}s;
                }
                .water-flow-main {
                    animation-duration: ${duration}s;
                }
                .water-flow-short {
                    animation-duration: ${duration}s;
                }
            `;
            
            // Remove previous dynamic style if it exists
            const existingStyle = document.getElementById('dynamic-animation-style');
            if (existingStyle) {
                existingStyle.remove();
            }
            
            style.id = 'dynamic-animation-style';
            document.head.appendChild(style);
        }
        
        function getFlowDashArray(type) {
            switch(type) {
                case 'main':
                    return '20 20'; // Long dashes for main pipe
                case 'short':
                    return '10 10'; // Medium dashes for short pipes
                case 'long':
                    return '15 15'; // Medium-long dashes for long pipes
                default:
                    return '10 10';
            }
        }
        
        function setElementVisibility(id, visible) {
            const element = document.getElementById(id);
            if (element) {
                element.style.display = visible ? '' : 'none';
            }
        }
        
        function toggleMotor(motorId) {
            const motor = state.motors.find(m => m.id === motorId);
            if (motor) {
                motor.isOn = !motor.isOn;
                updateVisualization();
            }
        }
        
        function toggleValve(valveId) {
            const valve = state.valves.find(v => v.id === valveId);
            if (valve) {
                valve.isOpen = !valve.isOpen;
                updateVisualization();
            }
        }
        
        // Create SVG elements
        function createSVG() {
            const svg = document.getElementById('water-system-svg');
            svg.innerHTML = ''; // Clear existing content
            
            // Draw motors
            state.motors.forEach((motor, index) => {
                const x = 100 + index * 100;
                const y = 80;
                
                // Create motor group
                const motorGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
                motorGroup.setAttribute('id', `motor-${motor.id}`);
                
                // Motor body
                const motorRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                motorRect.setAttribute('x', x - 30);
                motorRect.setAttribute('y', y - 25);
                motorRect.setAttribute('width', '60');
                motorRect.setAttribute('height', '50');
                motorRect.setAttribute('rx', '5');
                motorRect.setAttribute('fill', motor.isOn ? colorMotorActive : colorMotorInactive);
                motorRect.setAttribute('stroke', '#2d3748');
                motorRect.setAttribute('stroke-width', '2');
                motorRect.setAttribute('class', 'motor-rect');
                motorRect.setAttribute('id', `motor-rect-${motor.id}`);
                motorRect.addEventListener('click', () => toggleMotor(motor.id));
                
                // Motor label
                const motorText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                motorText.setAttribute('x', x);
                motorText.setAttribute('y', y + 5);
                motorText.setAttribute('text-anchor', 'middle');
                motorText.setAttribute('fill', 'white');
                motorText.setAttribute('font-weight', 'bold');
                motorText.textContent = `M ${motor.id}`;
                
                // Indicator light
                const indicatorCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                indicatorCircle.setAttribute('cx', x + 20);
                indicatorCircle.setAttribute('cy', y - 15);
                indicatorCircle.setAttribute('r', '5');
                indicatorCircle.setAttribute('fill', motor.isOn ? '#38a169' : '#e53e3e');
                indicatorCircle.setAttribute('id', `motor-indicator-${motor.id}`);
                
                // Pipe structure (always visible)
                const pipePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                pipePath.setAttribute('d', `M${x} ${y + 25} L${x} ${y + 70}`);
                pipePath.setAttribute('stroke', colorPipeInactive);
                pipePath.setAttribute('stroke-width', '10');
                pipePath.setAttribute('fill', 'none');
                pipePath.setAttribute('stroke-linecap', 'round');
                
                // Water flow animation (conditionally visible)
                const waterFlowPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                waterFlowPath.setAttribute('d', `M${x} ${y + 25} L${x} ${y + 70}`);
                waterFlowPath.setAttribute('stroke', colorPipeActive);
                waterFlowPath.setAttribute('stroke-width', '8');
                waterFlowPath.setAttribute('fill', 'none');
                waterFlowPath.setAttribute('stroke-linecap', 'round');
                waterFlowPath.setAttribute('stroke-dasharray', getFlowDashArray('short'));
                waterFlowPath.setAttribute('id', `motor-flow-${motor.id}`);
                waterFlowPath.setAttribute('class', 'water-flow-short');
                waterFlowPath.style.display = motor.isOn ? '' : 'none';
                
                // Add all elements to motor group
                motorGroup.appendChild(pipePath);
                motorGroup.appendChild(waterFlowPath);
                motorGroup.appendChild(motorRect);
                motorGroup.appendChild(motorText);
                motorGroup.appendChild(indicatorCircle);
                
                // Add motor group to SVG
                svg.appendChild(motorGroup);
            });
            
            // Main pipe (always visible)
            const mainPipe = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            mainPipe.setAttribute('d', 'M100 150 L700 150');
            mainPipe.setAttribute('stroke', colorPipeInactive);
            mainPipe.setAttribute('stroke-width', '12');
            mainPipe.setAttribute('fill', 'none');
            mainPipe.setAttribute('stroke-linecap', 'round');
            svg.appendChild(mainPipe);
            
            // Main pipe water flow (conditionally visible)
            const mainPipeFlow = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            mainPipeFlow.setAttribute('d', 'M100 150 L700 150');
            mainPipeFlow.setAttribute('stroke', colorPipeActive);
            mainPipeFlow.setAttribute('stroke-width', '10');
            mainPipeFlow.setAttribute('fill', 'none');
            mainPipeFlow.setAttribute('stroke-linecap', 'round');
            mainPipeFlow.setAttribute('stroke-dasharray', getFlowDashArray('main'));
            mainPipeFlow.setAttribute('id', 'main-pipe-flow');
            mainPipeFlow.setAttribute('class', 'water-flow-main');
            mainPipeFlow.style.display = ''; // Always visible
            svg.appendChild(mainPipeFlow);
            
            // Valves and platforms
            state.valves.forEach((valve, index) => {
                const x = 130 + index * 110;
                const y = 150;
                const platformY = 350;
                
                // Create valve group
                const valveGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
                valveGroup.setAttribute('id', `valve-group-${valve.id}`);
                
                // Pipe from main to valve (static)
                const pipeToValve = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                pipeToValve.setAttribute('d', `M${x} ${y} L${x} ${y + 50}`);
                pipeToValve.setAttribute('stroke', colorPipeInactive);
                pipeToValve.setAttribute('stroke-width', '8');
                pipeToValve.setAttribute('fill', 'none');
                pipeToValve.setAttribute('stroke-linecap', 'round');
                
                // Water flow to valve (conditionally visible)
                const flowToValve = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                flowToValve.setAttribute('d', `M${x} ${y} L${x} ${y + 50}`);
                flowToValve.setAttribute('stroke', colorPipeActive);
                flowToValve.setAttribute('stroke-width', '6');
                flowToValve.setAttribute('fill', 'none');
                flowToValve.setAttribute('stroke-linecap', 'round');
                flowToValve.setAttribute('stroke-dasharray', getFlowDashArray('short'));
                flowToValve.setAttribute('id', `valve-in-flow-${valve.id}`);
                flowToValve.setAttribute('class', 'water-flow-short');
                flowToValve.style.display = ''; // Always visible
                
                // Valve
                const valveCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                valveCircle.setAttribute('cx', x);
                valveCircle.setAttribute('cy', y + 70);
                valveCircle.setAttribute('r', '20');
                valveCircle.setAttribute('fill', valve.isOpen ? colorValveActive : colorValveInactive);
                valveCircle.setAttribute('stroke', '#2d3748');
                valveCircle.setAttribute('stroke-width', '2');
                valveCircle.setAttribute('class', 'valve-circle');
                valveCircle.setAttribute('id', `valve-circle-${valve.id}`);
                valveCircle.addEventListener('click', () => toggleValve(valve.id));
                
                // Valve handle
                const valveHandle = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                valveHandle.setAttribute('x', x - 2.5);
                valveHandle.setAttribute('y', y + 55);
                valveHandle.setAttribute('width', '5');
                valveHandle.setAttribute('height', '30');
                valveHandle.setAttribute('fill', '#2d3748');
                valveHandle.setAttribute('transform', valve.isOpen ? `rotate(90 ${x} ${y + 70})` : `rotate(0 ${x} ${y + 70})`);
                valveHandle.setAttribute('id', `valve-handle-${valve.id}`);
                
                // Valve number
                const valveText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                valveText.setAttribute('x', x);
                valveText.setAttribute('y', y + 74);
                valveText.setAttribute('text-anchor', 'middle');
                valveText.setAttribute('fill', 'white');
                valveText.setAttribute('font-weight', 'bold');
                valveText.setAttribute('font-size', '12');
                valveText.textContent = valve.id;
                
                // Pipe from valve to platform (static)
                const pipeToPlatform = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                pipeToPlatform.setAttribute('d', `M${x} ${y + 90} L${x} ${platformY - 40}`);
                pipeToPlatform.setAttribute('stroke', colorPipeInactive);
                pipeToPlatform.setAttribute('stroke-width', '8');
                pipeToPlatform.setAttribute('fill', 'none');
                pipeToPlatform.setAttribute('stroke-linecap', 'round');
                
                // Water flow to platform (conditionally visible)
                const flowToPlatform = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                flowToPlatform.setAttribute('d', `M${x} ${y + 90} L${x} ${platformY - 40}`);
                flowToPlatform.setAttribute('stroke', colorPipeActive);
                flowToPlatform.setAttribute('stroke-width', '6');
                flowToPlatform.setAttribute('fill', 'none');
                flowToPlatform.setAttribute('stroke-linecap', 'round');
                flowToPlatform.setAttribute('stroke-dasharray', getFlowDashArray('long'));
                flowToPlatform.setAttribute('id', `platform-flow-${valve.id}`);
                flowToPlatform.setAttribute('class', 'water-flow');
                flowToPlatform.style.display = 'none'; // Initially hidden
                
                // Platform
                const platform = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                platform.setAttribute('x', x - 35);
                platform.setAttribute('y', platformY - 20);
                platform.setAttribute('width', '70');
                platform.setAttribute('height', '40');
                platform.setAttribute('rx', '5');
                platform.setAttribute('fill', colorPlatformInactive);
                platform.setAttribute('stroke', '#2d3748');
                platform.setAttribute('stroke-width', '2');
                platform.setAttribute('id', `platform-${valve.id}`);
                
                // Platform label
                const platformText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                platformText.setAttribute('x', x);
                platformText.setAttribute('y', platformY + 5);
                platformText.setAttribute('text-anchor', 'middle');
                platformText.setAttribute('fill', '#4a5568');
                platformText.setAttribute('font-weight', 'bold');
                platformText.setAttribute('id', `platform-text-${valve.id}`);
                // platformText.textContent = `Platform ${valve.id}`;
                  if(valve.id===1){
                    platformText.textContent = "P1 & P2";
                }
                else if(valve.id===2){
                    platformText.textContent = "P3 & P4";
                }
                else if(valve.id===3){
                    platformText.textContent = "P5 & P6";
                }
                else if(valve.id===4){
                    platformText.textContent = "P7";
                }
                else if(valve.id===5){
                    platformText.textContent = "P8";
                }
                else if(valve.id===6){
                    platformText.textContent = "P9 & P10";
                }
                // Add all elements to valve group
                valveGroup.appendChild(pipeToValve);
                valveGroup.appendChild(flowToValve);
                valveGroup.appendChild(pipeToPlatform);
                valveGroup.appendChild(flowToPlatform);
                valveGroup.appendChild(platform);
                valveGroup.appendChild(platformText);
                valveGroup.appendChild(valveCircle);
                valveGroup.appendChild(valveHandle);
                valveGroup.appendChild(valveText);
                
                // Add valve group to SVG
                svg.appendChild(valveGroup);
            });
        }
        
        // Create control buttons
        // function createControls() {
        //     const motorsControls = document.getElementById('motors-controls');
        //     const valvesControls = document.getElementById('valves-controls');
            
        //     // Clear existing controls
        //     motorsControls.innerHTML = '';
        //     valvesControls.innerHTML = '';
            
        //     // Create motor buttons
        //     state.motors.forEach(motor => {
        //         const btn = document.createElement('button');
        //         btn.classList.add('btn', motor.isOn ? 'btn-primary' : 'btn-secondary', 'btn-motor');
        //         btn.textContent = `${motor.name}: ${motor.isOn ? 'ON' : 'OFF'}`;
        //         btn.addEventListener('click', () => toggleMotor(motor.id));
        //         motorsControls.appendChild(btn);
        //     });
            
        //     // Create valve buttons
        //     state.valves.forEach(valve => {
        //         const btn = document.createElement('button');
        //         btn.classList.add('btn', valve.isOpen ? 'btn-info' : 'btn-secondary', 'btn-valve');
        //         btn.textContent = `Valve ${valve.id}: ${valve.isOpen ? 'OPEN' : 'CLOSED'}`;
        //         btn.addEventListener('click', () => toggleValve(valve.id));
        //         valvesControls.appendChild(btn);
        //     });
        // }
        
        // Update the visualization based on current state
        function updateVisualization() {
            // Update animation speed based on active motors
            updateAnimationSpeed();
            
            // Update motors
            state.motors.forEach(motor => {
                const motorRect = document.getElementById(`motor-rect-${motor.id}`);
                const motorIndicator = document.getElementById(`motor-indicator-${motor.id}`);
                const motorFlow = document.getElementById(`motor-flow-${motor.id}`);
                
                if (motorRect) motorRect.setAttribute('fill', motor.isOn ? colorMotorActive : colorMotorInactive);
                if (motorIndicator) motorIndicator.setAttribute('fill', motor.isOn ? '#38a169' : '#e53e3e');
                if (motorFlow) motorFlow.style.display = motor.isOn ? '' : 'none';
            });
            
            // Update main pipe flow
            const mainPipeFlow = document.getElementById('main-pipe-flow');
            if (mainPipeFlow) {
                mainPipeFlow.style.display = ''; // Always visible
            }
            
            // Update valves, platforms, and their flows
            state.valves.forEach(valve => {
                const valveCircle = document.getElementById(`valve-circle-${valve.id}`);
                const valveHandle = document.getElementById(`valve-handle-${valve.id}`);
                const valveInFlow = document.getElementById(`valve-in-flow-${valve.id}`);
                const platformFlow = document.getElementById(`platform-flow-${valve.id}`);
                const platform = document.getElementById(`platform-${valve.id}`);
                const platformText = document.getElementById(`platform-text-${valve.id}`);
                
                const anyMotorOn = isAnyMotorOn();
                const isPassingWater = anyMotorOn && valve.isOpen;
                
                if (valveCircle) valveCircle.setAttribute('fill', valve.isOpen ? colorValveActive : colorValveInactive);
                if (valveHandle) {
                    const x = 130 + (valve.id - 1) * 110;
                    const y = 150;
                    valveHandle.setAttribute('transform', valve.isOpen ? `rotate(0 ${x} ${y + 70})` : `rotate(90 ${x} ${y + 70})`);
                }
                
                if (valveInFlow) valveInFlow.style.display = ''; // Always visible
                if (platformFlow) platformFlow.style.display = valve.isOpen ? '' : 'none'; // Only depends on valve state
                
                if (platform) platform.setAttribute('fill', isPassingWater ? colorPlatformActive : colorPlatformInactive);
                if (platformText) platformText.setAttribute('fill', isPassingWater ? 'white' : '#4a5568');
            });
            
            // Update the control buttons
            // createControls();
        }
        
        // Initialize the visualization
        function initialize() {
            createSVG();
            // createControls();
            updateVisualization();
        }
        
        // Setup event listener for window resize
        window.addEventListener('resize', () => {
            // Only recreate if window size significantly changes
            clearTimeout(window.resizeTimer);
            window.resizeTimer = setTimeout(() => {
                createSVG();
                updateVisualization();
            }, 250);
        });
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', initialize);
    </script>
